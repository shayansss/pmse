# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(50.0, 20.0))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    27.5, 8.75), point1=(25.0, 8.75))
mdb.models['Model-1'].sketches['__profile__'].EllipseByCenterPerimeter(
    axisPoint1=(6.25, 8.75), axisPoint2=(11.25, 7.5), center=(10.0, 6.25))
mdb.models['Model-1'].sketches['__profile__'].EllipseByCenterPerimeter(
    axisPoint1=(36.25, 15.0), axisPoint2=(37.5, 13.75), center=(40.0, 15.0))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    16.25, 11.25), point1=(17.5, 11.25))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.5)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].parts['Part-1'].deleteMesh()
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.5)
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.0)
mdb.models['Model-1'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=CPE8, elemLibrary=STANDARD), ElemType(elemCode=CPE6M, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Part-1'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), ))
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].parts.changeKey(fromName='Part-1', toName='Part')
mdb.models['Model-1'].parts.changeKey(fromName='Part', toName='part')
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].EllipseByCenterPerimeter(
    axisPoint1=(40.0, 0.0), axisPoint2=(17.5, 32.5), center=(0.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(-40.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(40.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], 
    mdb.models['Model-1'].sketches['__profile__'].vertices[4]))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-40.0, 0.0), point2=
    (40.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], point1=(
    -39.0068702697754, 5.61433410644531))
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], point1=(
    -24.5731353759766, 0.119453430175781))
mdb.models['Model-1'].sketches['__profile__'].HorizontalDimension(textPoint=(
    -15.9844665527344, 10.6313972473145), value=40.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6])
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].dimensions[0], ))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-40.0, 0.0), point2=
    (40.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='indenter', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['indenter'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['indenter'].setValues(space=TWO_D_PLANAR, type=
    ANALYTIC_RIGID_SURFACE)
#* Parts with type other than analytic rigid cannot change their type to 
#* analytic rigid.
del mdb.models['Model-1'].parts['indenter']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(20.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-20.0, 0.0), point2=
    (20.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], point1=(
    -16.3423271179199, 11.587028503418))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], ))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-19.3649167310371, 
    -5.0), point2=(19.3649167311378, -5.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], point1=(
    -20.040225982666, -1.19453811645508))
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], point1=(
    20.1595153808594, -1.79180908203125))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='indenter', type=
    ANALYTIC_RIGID_SURFACE)
mdb.models['Model-1'].parts['indenter'].AnalyticRigidSurf2DPlanar(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='indenter-1', 
    part=mdb.models['Model-1'].parts['indenter'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='part-1', part=
    mdb.models['Model-1'].parts['part'])
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['indenter'].features['2D Analytic rigid shell-1'].sketch)
mdb.models['Model-1'].parts['indenter'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['indenter'].features['2D Analytic rigid shell-1'])
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    -2.88554430007935, -26.203685760498), value=10.0, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[4], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[5])
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].Spot(point=(0.0, -20.0))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices[9], 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry[7])
mdb.models['Model-1'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[5], midpoint=
    mdb.models['Model-1'].sketches['__edit__'].vertices[9])
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], radius=5.0, 
    textPoint=(3.80334854125977, -11.8648176193237))
mdb.models['Model-1'].parts['indenter'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['indenter'].features['2D Analytic rigid shell-1'].sketch)
mdb.models['Model-1'].parts['indenter'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['indenter'].features['2D Analytic rigid shell-1'])
mdb.models['Model-1'].sketches['__edit__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], radius=5.0, 
    textPoint=(-4.38800621032715, -11.6954383850098))
mdb.models['Model-1'].parts['indenter'].features['2D Analytic rigid shell-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['indenter'].regenerate()
mdb.models['Model-1'].parts['indenter'].ReferencePoint(point=
    mdb.models['Model-1'].parts['indenter'].InterestingPoint(
    mdb.models['Model-1'].parts['indenter'].edges[1], MIDDLE))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['indenter'].features['2D Analytic rigid shell-1'].sketch)
mdb.models['Model-1'].parts['indenter'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['indenter'].features['2D Analytic rigid shell-1'])
mdb.models['Model-1'].sketches['__edit__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], radius=10.0, 
    textPoint=(15.7595186233521, -6.13278484344482))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].dimensions[0], ))
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].dimensions[0], ))
mdb.models['Model-1'].sketches['__edit__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], radius=10.0, 
    textPoint=(13.2006206512451, -5.88527297973633))
mdb.models['Model-1'].sketches['__edit__'].HorizontalDimension(textPoint=(
    11.248046875, 0.202468395233154), value=30.0, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[5], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[4])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['indenter'].features['2D Analytic rigid shell-1'].sketch)
mdb.models['Model-1'].parts['indenter'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['indenter'].features['2D Analytic rigid shell-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[0].setValues(value=10)
del mdb.models['Model-1'].sketches['__edit__']
del mdb.models['Model-1'].parts['indenter'].features['RP']
mdb.models['Model-1'].parts['indenter'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['indenter'].features['2D Analytic rigid shell-1'].sketch)
mdb.models['Model-1'].parts['indenter'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['indenter'].features['2D Analytic rigid shell-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[0].setValues(value=10)
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[5], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-1'].sketches['__edit__'].dimensions[0], 
    mdb.models['Model-1'].sketches['__edit__'].constraints[14]))
mdb.models['Model-1'].sketches['__edit__'].EllipseByCenterPerimeter(axisPoint1=
    (10.0, 0.0), axisPoint2=(0.0, -5.0), center=(0.0, 0.0))
mdb.models['Model-1'].sketches['__edit__'].Spot(point=(-10.0, 0.0))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices[12], 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry[8])
mdb.models['Model-1'].sketches['__edit__'].Spot(point=(0.0, 0.0))
mdb.models['Model-1'].sketches['__edit__'].Spot(point=(10.0, 0.0))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices[14], 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry[8])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(-10.0, 0.0), point2=(
    10.0, 0.0))
mdb.models['Model-1'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[10])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].vertices[12], 
    mdb.models['Model-1'].sketches['__edit__'].vertices[13], 
    mdb.models['Model-1'].sketches['__edit__'].vertices[14]))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[8], point1=(
    -5.8738899230957, 4.32776546478271))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[10], ))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(-10.6167430877686, 
    -1.20256972312927), point2=(11.25, -1.20256972312927))
mdb.models['Model-1'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[12])
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[12], point1=(
    -10.1969919204712, -1.24927449226379))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[11], point1=(
    -9.91715908050537, -0.595415353775024))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[14], point1=(
    9.78781127929688, -0.712175130844116))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[13], point1=(
    10.6506328582764, -1.13251376152039))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[16], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[15], ))
mdb.models['Model-1'].sketches['__edit__'].Arc3Points(point1=(0.0, 0.0), 
    point2=(-10.0, 0.0), point3=(-5.0, -5.0))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[17], ))
mdb.models['Model-1'].sketches['__edit__'].ArcByCenterEnds(center=(0.0, 0.0), 
    direction=COUNTERCLOCKWISE, point1=(-10.0, -1.25), point2=(10.0, -1.25))
mdb.models['Model-1'].parts['indenter'].features['2D Analytic rigid shell-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['indenter'].regenerate()
mdb.models['Model-1'].parts['indenter'].ReferencePoint(point=
    mdb.models['Model-1'].parts['indenter'].InterestingPoint(
    mdb.models['Model-1'].parts['indenter'].edges[0], CENTER))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.translate(instanceList=('indenter-1', ), 
    vector=(25.0, 30.077822, 0.0))
mdb.models['Model-1'].rootAssembly.features.changeKey(fromName='part-1', 
    toName='part')
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['part'].edges.getSequenceFromMask(
    ('[#10 ]', ), ), name='bottom')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='bottom', 
    region=mdb.models['Model-1'].rootAssembly.sets['bottom'], u1=SET, u2=SET, 
    ur3=SET)
mdb.models['Model-1'].rootAssembly.Set(name='refrence_point', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['indenter-1'].referencePoints[3], 
    ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='indenter', 
    region=mdb.models['Model-1'].rootAssembly.sets['refrence_point'], u1=SET, 
    u2=UNSET, ur3=SET)
mdb.models['Model-1'].Material(name='Material')
mdb.models['Model-1'].materials['Material'].Hyperelastic(materialType=ISOTROPIC
    , table=((14.0, 2.0), ), testData=OFF, type=NEO_HOOKE, volumetricResponse=
    VOLUMETRIC_DATA)
mdb.models['Model-1'].HomogeneousSolidSection(material='Material', name=
    'section', thickness=None)
mdb.models['Model-1'].parts['part'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['Model-1'].parts['part'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), )), sectionName='section', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].StaticStep(name='Step-1', nlgeom=ON, previous='Initial')
mdb.models['Model-1'].steps.changeKey(fromName='Step-1', toName='static')
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'MISES', 'U'))
del mdb.models['Model-1'].historyOutputRequests['H-Output-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job', nodalOutputPrecision=SINGLE, 
    numCpus=2, numDomains=2, numGPUs=0, queue=None, resultsFormat=ODB, scratch=
    '', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u2=-4.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ContactProperty('IntProp-1')
mdb.models['Model-1'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].interactionProperties['IntProp-1'].TangentialBehavior(
    formulation=FRICTIONLESS)
mdb.models['Model-1'].SelfContactStd(createStepName='static', 
    interactionProperty='IntProp-1', name='Int-1', surface=Region(
    side1Edges=mdb.models['Model-1'].rootAssembly.instances['part'].edges.getSequenceFromMask(
    mask=('[#f ]', ), )), thickness=ON)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='static', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='IntProp-1', master=Region(
    side2Edges=mdb.models['Model-1'].rootAssembly.instances['indenter-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), name='Int-2', slave=Region(
    side1Edges=mdb.models['Model-1'].rootAssembly.instances['part'].edges.getSequenceFromMask(
    mask=('[#40 ]', ), )), sliding=FINITE, thickness=ON)
mdb.models['Model-1'].parts['part'].deleteMesh(regions=
    mdb.models['Model-1'].parts['part'].faces.getSequenceFromMask(('[#1 ]', ), 
    ))
mdb.models['Model-1'].parts['part'].setMeshControls(elemShape=QUAD, regions=
    mdb.models['Model-1'].parts['part'].faces.getSequenceFromMask(('[#1 ]', ), 
    ))
mdb.models['Model-1'].parts['part'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job'].submit(consistencyChecking=OFF)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INITIAL POISSONS RATIO (PR0) FOR THE HYPERELASTIC MATERIAL IS ZERO OR NEGATIVE: PR0 = -0.85484.  IT IS GENERALLY RECOMMENDED THAT SINGLE ELEMENT MODELS BE USED TO VERIFY THAT THE CHOSEN MATERIAL CONSTANTS LEAD TO A WELL DEFINED HYPERELASTIC MATERIAL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 3772, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 34.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 20.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job', 'severe': 5, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_COMPLETED, {'time': 'Thu Sep  9 15:22:18 2021', 
    'jobName': 'Job'})
mdb.models['Model-1'].parts['part'].deleteMesh(regions=
    mdb.models['Model-1'].parts['part'].faces.getSequenceFromMask(('[#1 ]', ), 
    ))
mdb.models['Model-1'].parts['part'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['part'].edges.getSequenceFromMask(('[#f ]', ), 
    ), minSizeFactor=0.1, size=0.4)
mdb.models['Model-1'].parts['part'].generateMesh()
mdb.models['Model-1'].parts['part'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INITIAL POISSONS RATIO (PR0) FOR THE HYPERELASTIC MATERIAL IS ZERO OR NEGATIVE: PR0 = -0.85484.  IT IS GENERALLY RECOMMENDED THAT SINGLE ELEMENT MODELS BE USED TO VERIFY THAT THE CHOSEN MATERIAL CONSTANTS LEAD TO A WELL DEFINED HYPERELASTIC MATERIAL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 10460, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 49.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 22.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job', 'severe': 5, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_COMPLETED, {'time': 'Thu Sep  9 15:24:42 2021', 
    'jobName': 'Job'})
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    formulation=FRICTIONLESS)
mdb.models['Model-1'].interactionProperties['IntProp-1'].normalBehavior.setValues(
    allowSeparation=ON, clearanceAtZeroContactPressure=0.0, 
    constraintEnforcementMethod=PENALTY, contactStiffness=DEFAULT, 
    contactStiffnessScaleFactor=1.0, pressureOverclosure=HARD, 
    stiffnessBehavior=LINEAR)
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INITIAL POISSONS RATIO (PR0) FOR THE HYPERELASTIC MATERIAL IS ZERO OR NEGATIVE: PR0 = -0.85484.  IT IS GENERALLY RECOMMENDED THAT SINGLE ELEMENT MODELS BE USED TO VERIFY THAT THE CHOSEN MATERIAL CONSTANTS LEAD TO A WELL DEFINED HYPERELASTIC MATERIAL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 6256, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 49.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 22.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job', 'severe': 5, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_COMPLETED, {'time': 'Thu Sep  9 15:27:10 2021', 
    'jobName': 'Job'})
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u2=-15.0)
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INITIAL POISSONS RATIO (PR0) FOR THE HYPERELASTIC MATERIAL IS ZERO OR NEGATIVE: PR0 = -0.85484.  IT IS GENERALLY RECOMMENDED THAT SINGLE ELEMENT MODELS BE USED TO VERIFY THAT THE CHOSEN MATERIAL CONSTANTS LEAD TO A WELL DEFINED HYPERELASTIC MATERIAL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 15372, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 49.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 22.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 178 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 5, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 16 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': 2, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': ' 1U', 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3359375, 'attempts': 2, 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.3359375, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3359375, 'attempts': ' 1U', 
    'timeIncrement': 0.03515625, 'increment': 4, 'stepTime': 0.3359375, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3447265625, 'attempts': 2, 
    'timeIncrement': 0.0087890625, 'increment': 4, 'stepTime': 0.3447265625, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.35791015625, 'attempts': 1, 
    'timeIncrement': 0.01318359375, 'increment': 5, 'stepTime': 0.35791015625, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.35791015625, 
    'attempts': ' 1U', 'timeIncrement': 0.019775390625, 'increment': 6, 
    'stepTime': 0.35791015625, 'step': 1, 'jobName': 'Job', 'severe': 1, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.35791015625, 
    'attempts': ' 2U', 'timeIncrement': 0.00494384765625, 'increment': 6, 
    'stepTime': 0.35791015625, 'step': 1, 'jobName': 'Job', 'severe': 1, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.35791015625, 
    'attempts': ' 3U', 'timeIncrement': 0.0012359619140625, 'increment': 6, 
    'stepTime': 0.35791015625, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.35791015625, 
    'attempts': ' 4U', 'timeIncrement': 0.000308990478515625, 'increment': 6, 
    'stepTime': 0.35791015625, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.35791015625, 
    'attempts': ' 5U', 'timeIncrement': 7.72476196289063e-05, 'increment': 6, 
    'stepTime': 0.35791015625, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    formulation=FRICTIONLESS)
mdb.models['Model-1'].interactionProperties['IntProp-1'].normalBehavior.setValues(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INITIAL POISSONS RATIO (PR0) FOR THE HYPERELASTIC MATERIAL IS ZERO OR NEGATIVE: PR0 = -0.85484.  IT IS GENERALLY RECOMMENDED THAT SINGLE ELEMENT MODELS BE USED TO VERIFY THAT THE CHOSEN MATERIAL CONSTANTS LEAD TO A WELL DEFINED HYPERELASTIC MATERIAL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 13156, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 49.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 22.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 178 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 5, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 16 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': 2, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': ' 1U', 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3359375, 'attempts': 2, 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.3359375, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3359375, 'attempts': ' 1U', 
    'timeIncrement': 0.03515625, 'increment': 4, 'stepTime': 0.3359375, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3447265625, 'attempts': 2, 
    'timeIncrement': 0.0087890625, 'increment': 4, 'stepTime': 0.3447265625, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.35791015625, 'attempts': 1, 
    'timeIncrement': 0.01318359375, 'increment': 5, 'stepTime': 0.35791015625, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.35791015625, 
    'attempts': ' 1U', 'timeIncrement': 0.019775390625, 'increment': 6, 
    'stepTime': 0.35791015625, 'step': 1, 'jobName': 'Job', 'severe': 1, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.35791015625, 
    'attempts': ' 2U', 'timeIncrement': 0.00494384765625, 'increment': 6, 
    'stepTime': 0.35791015625, 'step': 1, 'jobName': 'Job', 'severe': 1, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.35791015625, 
    'attempts': ' 3U', 'timeIncrement': 0.0012359619140625, 'increment': 6, 
    'stepTime': 0.35791015625, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.35791015625, 
    'attempts': ' 4U', 'timeIncrement': 0.000308990478515625, 'increment': 6, 
    'stepTime': 0.35791015625, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.35791015625, 
    'attempts': ' 5U', 'timeIncrement': 7.72476196289063e-05, 'increment': 6, 
    'stepTime': 0.35791015625, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.models['Model-1'].parts['part'].deleteMesh(regions=
    mdb.models['Model-1'].parts['part'].faces.getSequenceFromMask(('[#1 ]', ), 
    ))
mdb.models['Model-1'].parts['part'].setMeshControls(elemShape=TRI, regions=
    mdb.models['Model-1'].parts['part'].faces.getSequenceFromMask(('[#1 ]', ), 
    ))
mdb.models['Model-1'].parts['part'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INITIAL POISSONS RATIO (PR0) FOR THE HYPERELASTIC MATERIAL IS ZERO OR NEGATIVE: PR0 = -0.85484.  IT IS GENERALLY RECOMMENDED THAT SINGLE ELEMENT MODELS BE USED TO VERIFY THAT THE CHOSEN MATERIAL CONSTANTS LEAD TO A WELL DEFINED HYPERELASTIC MATERIAL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 5416, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 53.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 18 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 79 POINTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 5, 'iterations': 13, 'phase': STANDARD_PHASE, 
    'equilibrium': 8})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 26 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 5 POINTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 2U', 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 12, 'phase': STANDARD_PHASE, 
    'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.28125, 'attempts': 3, 
    'timeIncrement': 0.03125, 'increment': 2, 'stepTime': 0.28125, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': 1, 
    'timeIncrement': 0.03125, 'increment': 3, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 38 POINTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': ' 1U', 
    'timeIncrement': 0.03125, 'increment': 4, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3203125, 'attempts': 2, 
    'timeIncrement': 0.0078125, 'increment': 4, 'stepTime': 0.3203125, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.328125, 'attempts': 1, 
    'timeIncrement': 0.0078125, 'increment': 5, 'stepTime': 0.328125, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.328125, 'attempts': ' 1U', 
    'timeIncrement': 0.0078125, 'increment': 6, 'stepTime': 0.328125, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.330078125, 'attempts': 2, 
    'timeIncrement': 0.001953125, 'increment': 6, 'stepTime': 0.330078125, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.330078125, 'attempts': ' 1U', 
    'timeIncrement': 0.0029296875, 'increment': 7, 'stepTime': 0.330078125, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.330078125, 'attempts': ' 2U', 
    'timeIncrement': 0.000732421875, 'increment': 7, 'stepTime': 0.330078125, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.330078125, 'attempts': ' 3U', 
    'timeIncrement': 0.00018310546875, 'increment': 7, 'stepTime': 0.330078125, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.330078125, 'attempts': ' 4U', 
    'timeIncrement': 4.57763671875e-05, 'increment': 7, 
    'stepTime': 0.330078125, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.330078125, 'attempts': ' 5U', 
    'timeIncrement': 1.1444091796875e-05, 'increment': 7, 
    'stepTime': 0.330078125, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.models['Model-1'].parts['part'].deleteMesh(regions=
    mdb.models['Model-1'].parts['part'].faces.getSequenceFromMask(('[#1 ]', ), 
    ))
mdb.models['Model-1'].parts['part'].setMeshControls(elemShape=QUAD, regions=
    mdb.models['Model-1'].parts['part'].faces.getSequenceFromMask(('[#1 ]', ), 
    ))
mdb.models['Model-1'].parts['part'].generateMesh()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['part'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['part'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['part'].features['Shell planar-1'])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[11], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[9], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[6], ))
mdb.models['Model-1'].sketches['__edit__'].CircleByCenterPerimeter(center=(
    25.0, 15.0), point1=(27.5, 15.0))
mdb.models['Model-1'].parts['part'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['part'].regenerate()
mdb.models['Model-1'].parts['part'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['part'].edges.getSequenceFromMask(('[#1 ]', ), 
    ), minSizeFactor=0.1, size=0.4)
mdb.models['Model-1'].parts['part'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].interactions['Int-1'].setValues(contactTracking=
    TWO_CONFIG, enforcement=SURFACE_TO_SURFACE, surface=Region(
    side1Edges=mdb.models['Model-1'].rootAssembly.instances['part'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), thickness=ON)
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INITIAL POISSONS RATIO (PR0) FOR THE HYPERELASTIC MATERIAL IS ZERO OR NEGATIVE: PR0 = -0.85484.  IT IS GENERALLY RECOMMENDED THAT SINGLE ELEMENT MODELS BE USED TO VERIFY THAT THE CHOSEN MATERIAL CONSTANTS LEAD TO A WELL DEFINED HYPERELASTIC MATERIAL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 2264, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 38.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 264 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 4, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 22 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 21 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': 2, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 12, 'phase': STANDARD_PHASE, 
    'equilibrium': 11})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 12 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': ' 1U', 
    'timeIncrement': 0.046875, 'increment': 3, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': ' 2U', 
    'timeIncrement': 0.01171875, 'increment': 3, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3154296875, 'attempts': 3, 
    'timeIncrement': 0.0029296875, 'increment': 3, 'stepTime': 0.3154296875, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.318359375, 'attempts': 1, 
    'timeIncrement': 0.0029296875, 'increment': 4, 'stepTime': 0.318359375, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.318359375, 'attempts': ' 1U', 
    'timeIncrement': 0.0029296875, 'increment': 5, 'stepTime': 0.318359375, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.319091796875, 'attempts': 2, 
    'timeIncrement': 0.000732421875, 'increment': 5, 
    'stepTime': 0.319091796875, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.319091796875, 
    'attempts': ' 1U', 'timeIncrement': 0.0010986328125, 'increment': 6, 
    'stepTime': 0.319091796875, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.319091796875, 
    'attempts': ' 2U', 'timeIncrement': 0.000274658203125, 'increment': 6, 
    'stepTime': 0.319091796875, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.319091796875, 
    'attempts': ' 3U', 'timeIncrement': 6.866455078125e-05, 'increment': 6, 
    'stepTime': 0.319091796875, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.319091796875, 
    'attempts': ' 4U', 'timeIncrement': 1.71661376953125e-05, 'increment': 6, 
    'stepTime': 0.319091796875, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.319091796875, 
    'attempts': ' 5U', 'timeIncrement': 1e-05, 'increment': 6, 
    'stepTime': 0.319091796875, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.models['Model-1'].steps['static'].setValues(adaptiveDampingRatio=0.05, 
    continueDampingFactors=False, stabilizationMagnitude=0.0002, 
    stabilizationMethod=DISSIPATED_ENERGY_FRACTION)
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INITIAL POISSONS RATIO (PR0) FOR THE HYPERELASTIC MATERIAL IS ZERO OR NEGATIVE: PR0 = -0.85484.  IT IS GENERALLY RECOMMENDED THAT SINGLE ELEMENT MODELS BE USED TO VERIFY THAT THE CHOSEN MATERIAL CONSTANTS LEAD TO A WELL DEFINED HYPERELASTIC MATERIAL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 6632, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 39.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 264 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 4, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 21 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 22 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': 2, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 12, 'phase': STANDARD_PHASE, 
    'equilibrium': 11})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 10 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': ' 1U', 
    'timeIncrement': 0.046875, 'increment': 3, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': ' 2U', 
    'timeIncrement': 0.01171875, 'increment': 3, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3154296875, 'attempts': 3, 
    'timeIncrement': 0.0029296875, 'increment': 3, 'stepTime': 0.3154296875, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3154296875, 'attempts': ' 1U', 
    'timeIncrement': 0.0029296875, 'increment': 4, 'stepTime': 0.3154296875, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3154296875, 'attempts': ' 2U', 
    'timeIncrement': 0.000732421875, 'increment': 4, 'stepTime': 0.3154296875, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 16, 
    'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3154296875, 'attempts': ' 3U', 
    'timeIncrement': 0.00018310546875, 'increment': 4, 
    'stepTime': 0.3154296875, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3154296875, 'attempts': ' 4U', 
    'timeIncrement': 4.57763671875e-05, 'increment': 4, 
    'stepTime': 0.3154296875, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.315441131591797, 
    'attempts': 5, 'timeIncrement': 1.1444091796875e-05, 'increment': 4, 
    'stepTime': 0.315441131591797, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 15, 'phase': STANDARD_PHASE, 'equilibrium': 15})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.315451131591797, 
    'attempts': 1, 'timeIncrement': 1e-05, 'increment': 5, 
    'stepTime': 0.315451131591797, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 14, 'phase': STANDARD_PHASE, 'equilibrium': 14})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.315461131591797, 
    'attempts': 1, 'timeIncrement': 1e-05, 'increment': 6, 
    'stepTime': 0.315461131591797, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.315471131591797, 
    'attempts': 1, 'timeIncrement': 1e-05, 'increment': 7, 
    'stepTime': 0.315471131591797, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.315481131591797, 
    'attempts': 1, 'timeIncrement': 1e-05, 'increment': 8, 
    'stepTime': 0.315481131591797, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.315496131591797, 
    'attempts': 1, 'timeIncrement': 1.5e-05, 'increment': 9, 
    'stepTime': 0.315496131591797, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.315518631591797, 
    'attempts': 1, 'timeIncrement': 2.25e-05, 'increment': 10, 
    'stepTime': 0.315518631591797, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.315552381591797, 
    'attempts': 1, 'timeIncrement': 3.375e-05, 'increment': 11, 
    'stepTime': 0.315552381591797, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.315603006591797, 
    'attempts': 1, 'timeIncrement': 5.0625e-05, 'increment': 12, 
    'stepTime': 0.315603006591797, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.315653631591797, 
    'attempts': 1, 'timeIncrement': 5.0625e-05, 'increment': 13, 
    'stepTime': 0.315653631591797, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.315704256591797, 
    'attempts': 1, 'timeIncrement': 5.0625e-05, 'increment': 14, 
    'stepTime': 0.315704256591797, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.315780194091797, 
    'attempts': 1, 'timeIncrement': 7.59375e-05, 'increment': 15, 
    'stepTime': 0.315780194091797, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.315894100341797, 
    'attempts': 1, 'timeIncrement': 0.00011390625, 'increment': 16, 
    'stepTime': 0.315894100341797, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.316064959716797, 
    'attempts': 1, 'timeIncrement': 0.000170859375, 'increment': 17, 
    'stepTime': 0.316064959716797, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.316193104248047, 
    'attempts': 1, 'timeIncrement': 0.00012814453125, 'increment': 18, 
    'stepTime': 0.316193104248047, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 12, 'phase': STANDARD_PHASE, 'equilibrium': 12})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.316289212646484, 
    'attempts': 1, 'timeIncrement': 9.61083984375e-05, 'increment': 19, 
    'stepTime': 0.316289212646484, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.316289212646484, 
    'attempts': ' 1U', 'timeIncrement': 9.61083984375e-05, 'increment': 20, 
    'stepTime': 0.316289212646484, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.316313239746094, 
    'attempts': 2, 'timeIncrement': 2.4027099609375e-05, 'increment': 20, 
    'stepTime': 0.316313239746094, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 12, 'phase': STANDARD_PHASE, 'equilibrium': 12})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.316331260070801, 
    'attempts': 1, 'timeIncrement': 1.80203247070313e-05, 'increment': 21, 
    'stepTime': 0.316331260070801, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.316349280395508, 
    'attempts': 1, 'timeIncrement': 1.80203247070313e-05, 'increment': 22, 
    'stepTime': 0.316349280395508, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.316376310882568, 
    'attempts': 1, 'timeIncrement': 2.70304870605469e-05, 'increment': 23, 
    'stepTime': 0.316376310882568, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.316416856613159, 
    'attempts': 1, 'timeIncrement': 4.05457305908203e-05, 'increment': 24, 
    'stepTime': 0.316416856613159, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.31645740234375, 'attempts': 1, 
    'timeIncrement': 4.05457305908203e-05, 'increment': 25, 
    'stepTime': 0.31645740234375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.316497948074341, 
    'attempts': 1, 'timeIncrement': 4.05457305908203e-05, 'increment': 26, 
    'stepTime': 0.316497948074341, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.316538493804932, 
    'attempts': 1, 'timeIncrement': 4.05457305908203e-05, 'increment': 27, 
    'stepTime': 0.316538493804932, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.316599312400818, 
    'attempts': 1, 'timeIncrement': 6.08185958862305e-05, 'increment': 28, 
    'stepTime': 0.316599312400818, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.316690540294647, 
    'attempts': 1, 'timeIncrement': 9.12278938293457e-05, 'increment': 29, 
    'stepTime': 0.316690540294647, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.316827382135391, 
    'attempts': 1, 'timeIncrement': 0.000136841840744019, 'increment': 30, 
    'stepTime': 0.316827382135391, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 14, 'phase': STANDARD_PHASE, 'equilibrium': 14})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.316930013515949, 
    'attempts': 1, 'timeIncrement': 0.000102631380558014, 'increment': 31, 
    'stepTime': 0.316930013515949, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 14, 'phase': STANDARD_PHASE, 'equilibrium': 14})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317006987051368, 
    'attempts': 1, 'timeIncrement': 7.69735354185105e-05, 'increment': 32, 
    'stepTime': 0.317006987051368, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317006987051368, 
    'attempts': ' 1U', 'timeIncrement': 7.69735354185105e-05, 'increment': 33, 
    'stepTime': 0.317006987051368, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317026230435222, 
    'attempts': 2, 'timeIncrement': 1.92433838546276e-05, 'increment': 33, 
    'stepTime': 0.317026230435222, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317045473819077, 
    'attempts': 1, 'timeIncrement': 1.92433838546276e-05, 'increment': 34, 
    'stepTime': 0.317045473819077, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317064717202932, 
    'attempts': 1, 'timeIncrement': 1.92433838546276e-05, 'increment': 35, 
    'stepTime': 0.317064717202932, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317083960586786, 
    'attempts': 1, 'timeIncrement': 1.92433838546276e-05, 'increment': 36, 
    'stepTime': 0.317083960586786, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317103203970641, 
    'attempts': 1, 'timeIncrement': 1.92433838546276e-05, 'increment': 37, 
    'stepTime': 0.317103203970641, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317122447354496, 
    'attempts': 1, 'timeIncrement': 1.92433838546276e-05, 'increment': 38, 
    'stepTime': 0.317122447354496, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.31714169073835, 'attempts': 1, 
    'timeIncrement': 1.92433838546276e-05, 'increment': 39, 
    'stepTime': 0.31714169073835, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317170555814132, 
    'attempts': 1, 'timeIncrement': 2.88650757819414e-05, 'increment': 40, 
    'stepTime': 0.317170555814132, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317199420889914, 
    'attempts': 1, 'timeIncrement': 2.88650757819414e-05, 'increment': 41, 
    'stepTime': 0.317199420889914, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317228285965696, 
    'attempts': 1, 'timeIncrement': 2.88650757819414e-05, 'increment': 42, 
    'stepTime': 0.317228285965696, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317271583579369, 
    'attempts': 1, 'timeIncrement': 4.32976136729121e-05, 'increment': 43, 
    'stepTime': 0.317271583579369, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 15, 'phase': STANDARD_PHASE, 'equilibrium': 15})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317304056789624, 
    'attempts': 1, 'timeIncrement': 3.24732102546841e-05, 'increment': 44, 
    'stepTime': 0.317304056789624, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 11, 'phase': STANDARD_PHASE, 'equilibrium': 11})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317328411697315, 
    'attempts': 1, 'timeIncrement': 2.43549076910131e-05, 'increment': 45, 
    'stepTime': 0.317328411697315, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317352766605006, 
    'attempts': 1, 'timeIncrement': 2.43549076910131e-05, 'increment': 46, 
    'stepTime': 0.317352766605006, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317377121512697, 
    'attempts': 1, 'timeIncrement': 2.43549076910131e-05, 'increment': 47, 
    'stepTime': 0.317377121512697, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317401476420388, 
    'attempts': 1, 'timeIncrement': 2.43549076910131e-05, 'increment': 48, 
    'stepTime': 0.317401476420388, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317438008781924, 
    'attempts': 1, 'timeIncrement': 3.65323615365196e-05, 'increment': 49, 
    'stepTime': 0.317438008781924, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317474541143461, 
    'attempts': 1, 'timeIncrement': 3.65323615365196e-05, 'increment': 50, 
    'stepTime': 0.317474541143461, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317511073504997, 
    'attempts': 1, 'timeIncrement': 3.65323615365196e-05, 'increment': 51, 
    'stepTime': 0.317511073504997, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 11, 'phase': STANDARD_PHASE, 'equilibrium': 11})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.31753847277615, 'attempts': 1, 
    'timeIncrement': 2.73992711523897e-05, 'increment': 52, 
    'stepTime': 0.31753847277615, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317565872047302, 
    'attempts': 1, 'timeIncrement': 2.73992711523897e-05, 'increment': 53, 
    'stepTime': 0.317565872047302, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317593271318454, 
    'attempts': 1, 'timeIncrement': 2.73992711523897e-05, 'increment': 54, 
    'stepTime': 0.317593271318454, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317620670589607, 
    'attempts': 1, 'timeIncrement': 2.73992711523897e-05, 'increment': 55, 
    'stepTime': 0.317620670589607, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317661769496335, 
    'attempts': 1, 'timeIncrement': 4.10989067285846e-05, 'increment': 56, 
    'stepTime': 0.317661769496335, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317702868403064, 
    'attempts': 1, 'timeIncrement': 4.10989067285846e-05, 'increment': 57, 
    'stepTime': 0.317702868403064, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.317743967309793, 
    'attempts': 1, 'timeIncrement': 4.10989067285846e-05, 'increment': 58, 
    'stepTime': 0.317743967309793, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    14.0, 0.0), ))
mdb.models['Model-1'].parts['part'].setElementType(elemTypes=(ElemType(
    elemCode=CPE8H, elemLibrary=STANDARD), ElemType(elemCode=CPE6M, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['part'].faces.getSequenceFromMask(('[#1 ]', ), 
    ), ))
mdb.models['Model-1'].parts['part'].generateMesh()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 5584, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 56.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 22.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 3030 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 9074 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'Job', 'severe': 4, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.125, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'equilibrium': 7})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.125, 'attempts': ' 1U', 
    'timeIncrement': 0.0625, 'increment': 3, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'Job', 'severe': 2, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.140625, 'attempts': 2, 
    'timeIncrement': 0.015625, 'increment': 3, 'stepTime': 0.140625, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.15625, 'attempts': 1, 
    'timeIncrement': 0.015625, 'increment': 4, 'stepTime': 0.15625, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.171875, 'attempts': 1, 
    'timeIncrement': 0.015625, 'increment': 5, 'stepTime': 0.171875, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 11, 'phase': STANDARD_PHASE, 
    'equilibrium': 10})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.171875, 'attempts': ' 1U', 
    'timeIncrement': 0.015625, 'increment': 6, 'stepTime': 0.171875, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.17578125, 'attempts': 2, 
    'timeIncrement': 0.00390625, 'increment': 6, 'stepTime': 0.17578125, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 47 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.17578125, 'attempts': ' 1U', 
    'timeIncrement': 0.00390625, 'increment': 7, 'stepTime': 0.17578125, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.1767578125, 'attempts': 2, 
    'timeIncrement': 0.0009765625, 'increment': 7, 'stepTime': 0.1767578125, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.1767578125, 'attempts': ' 1U', 
    'timeIncrement': 0.00146484375, 'increment': 8, 'stepTime': 0.1767578125, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.1771240234375, 'attempts': 2, 
    'timeIncrement': 0.0003662109375, 'increment': 8, 
    'stepTime': 0.1771240234375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.17767333984375, 'attempts': 1, 
    'timeIncrement': 0.00054931640625, 'increment': 9, 
    'stepTime': 0.17767333984375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.17767333984375, 
    'attempts': ' 1U', 'timeIncrement': 0.000823974609375, 'increment': 10, 
    'stepTime': 0.17767333984375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.17767333984375, 
    'attempts': ' 2U', 'timeIncrement': 0.00020599365234375, 'increment': 10, 
    'stepTime': 0.17767333984375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.177724838256836, 
    'attempts': 3, 'timeIncrement': 5.14984130859375e-05, 'increment': 10, 
    'stepTime': 0.177724838256836, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.177724838256836, 
    'attempts': ' 1U', 'timeIncrement': 7.72476196289063e-05, 'increment': 11, 
    'stepTime': 0.177724838256836, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.177744150161743, 
    'attempts': 2, 'timeIncrement': 1.93119049072266e-05, 'increment': 11, 
    'stepTime': 0.177744150161743, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.177744150161743, 
    'attempts': ' 1U', 'timeIncrement': 2.89678573608398e-05, 'increment': 12, 
    'stepTime': 0.177744150161743, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.177754150161743, 
    'attempts': 2, 'timeIncrement': 1e-05, 'increment': 12, 
    'stepTime': 0.177754150161743, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.177769150161743, 
    'attempts': 1, 'timeIncrement': 1.5e-05, 'increment': 13, 
    'stepTime': 0.177769150161743, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.177769150161743, 
    'attempts': ' 1U', 'timeIncrement': 2.25e-05, 'increment': 14, 
    'stepTime': 0.177769150161743, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.177779150161743, 
    'attempts': 2, 'timeIncrement': 1e-05, 'increment': 14, 
    'stepTime': 0.177779150161743, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.177779150161743, 
    'attempts': ' 1U', 'timeIncrement': 1.5e-05, 'increment': 15, 
    'stepTime': 0.177779150161743, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.177789150161743, 
    'attempts': 2, 'timeIncrement': 1e-05, 'increment': 15, 
    'stepTime': 0.177789150161743, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.177789150161743, 
    'attempts': ' 1U', 'timeIncrement': 1.5e-05, 'increment': 16, 
    'stepTime': 0.177789150161743, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.177789150161743, 
    'attempts': ' 2U', 'timeIncrement': 1e-05, 'increment': 16, 
    'stepTime': 0.177789150161743, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.models['Model-1'].parts['part'].setElementType(elemTypes=(ElemType(
    elemCode=CPE4H, elemLibrary=STANDARD), ElemType(elemCode=CPE3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['part'].faces.getSequenceFromMask(('[#1 ]', ), 
    ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 13032, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 30.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 861 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 20 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0625, 'attempts': 3, 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.125, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'Job', 'severe': 2, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2156 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.125, 'attempts': ' 1U', 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'Job', 'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.1484375, 'attempts': 2, 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.1484375, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.1484375, 'attempts': ' 1U', 
    'timeIncrement': 0.0234375, 'increment': 4, 'stepTime': 0.1484375, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.16015625, 'attempts': 2, 
    'timeIncrement': 0.01171875, 'increment': 4, 'stepTime': 0.16015625, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.171875, 'attempts': 1, 
    'timeIncrement': 0.01171875, 'increment': 5, 'stepTime': 0.171875, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 11, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.18359375, 'attempts': 1, 
    'timeIncrement': 0.01171875, 'increment': 6, 'stepTime': 0.18359375, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.18359375, 'attempts': ' 1U', 
    'timeIncrement': 0.01171875, 'increment': 7, 'stepTime': 0.18359375, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.189453125, 'attempts': 2, 
    'timeIncrement': 0.005859375, 'increment': 7, 'stepTime': 0.189453125, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.1953125, 'attempts': 1, 
    'timeIncrement': 0.005859375, 'increment': 8, 'stepTime': 0.1953125, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.1953125, 'attempts': ' 1U', 
    'timeIncrement': 0.0087890625, 'increment': 9, 'stepTime': 0.1953125, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.197509765625, 'attempts': 2, 
    'timeIncrement': 0.002197265625, 'increment': 9, 
    'stepTime': 0.197509765625, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.2008056640625, 'attempts': 1, 
    'timeIncrement': 0.0032958984375, 'increment': 10, 
    'stepTime': 0.2008056640625, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.20574951171875, 'attempts': 1, 
    'timeIncrement': 0.00494384765625, 'increment': 11, 
    'stepTime': 0.20574951171875, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.210693359375, 'attempts': 1, 
    'timeIncrement': 0.00494384765625, 'increment': 12, 
    'stepTime': 0.210693359375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.210693359375, 
    'attempts': ' 1U', 'timeIncrement': 0.00494384765625, 'increment': 13, 
    'stepTime': 0.210693359375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.211929321289063, 
    'attempts': 2, 'timeIncrement': 0.0012359619140625, 'increment': 13, 
    'stepTime': 0.211929321289063, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.213783264160156, 
    'attempts': 1, 'timeIncrement': 0.00185394287109375, 'increment': 14, 
    'stepTime': 0.213783264160156, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.216564178466797, 
    'attempts': 1, 'timeIncrement': 0.00278091430664063, 'increment': 15, 
    'stepTime': 0.216564178466797, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.219345092773438, 
    'attempts': 1, 'timeIncrement': 0.00278091430664063, 'increment': 16, 
    'stepTime': 0.219345092773438, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 13, 'phase': STANDARD_PHASE, 'equilibrium': 13})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.221430778503418, 
    'attempts': 1, 'timeIncrement': 0.00208568572998047, 'increment': 17, 
    'stepTime': 0.221430778503418, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.223516464233398, 
    'attempts': 1, 'timeIncrement': 0.00208568572998047, 'increment': 18, 
    'stepTime': 0.223516464233398, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.223516464233398, 
    'attempts': ' 1U', 'timeIncrement': 0.0031285285949707, 'increment': 19, 
    'stepTime': 0.223516464233398, 'step': 1, 'jobName': 'Job', 'severe': 2, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.224298596382141, 
    'attempts': 2, 'timeIncrement': 0.000782132148742676, 'increment': 19, 
    'stepTime': 0.224298596382141, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.225471794605255, 
    'attempts': 1, 'timeIncrement': 0.00117319822311401, 'increment': 20, 
    'stepTime': 0.225471794605255, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.227231591939926, 
    'attempts': 1, 'timeIncrement': 0.00175979733467102, 'increment': 21, 
    'stepTime': 0.227231591939926, 'step': 1, 'jobName': 'Job', 'severe': 3, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.227231591939926, 
    'attempts': ' 1U', 'timeIncrement': 0.00263969600200653, 'increment': 22, 
    'stepTime': 0.227231591939926, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.227891515940428, 
    'attempts': 2, 'timeIncrement': 0.000659924000501633, 'increment': 22, 
    'stepTime': 0.227891515940428, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.22888140194118, 'attempts': 1, 
    'timeIncrement': 0.000989886000752449, 'increment': 23, 
    'stepTime': 0.22888140194118, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.230366230942309, 
    'attempts': 1, 'timeIncrement': 0.00148482900112867, 'increment': 24, 
    'stepTime': 0.230366230942309, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.232593474444002, 
    'attempts': 1, 'timeIncrement': 0.00222724350169301, 'increment': 25, 
    'stepTime': 0.232593474444002, 'step': 1, 'jobName': 'Job', 'severe': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.232593474444002, 
    'attempts': ' 1U', 'timeIncrement': 0.00334086525253952, 'increment': 26, 
    'stepTime': 0.232593474444002, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.233428690757137, 
    'attempts': 2, 'timeIncrement': 0.000835216313134879, 'increment': 26, 
    'stepTime': 0.233428690757137, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.234681515226839, 
    'attempts': 1, 'timeIncrement': 0.00125282446970232, 'increment': 27, 
    'stepTime': 0.234681515226839, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.236560751931393, 
    'attempts': 1, 'timeIncrement': 0.00187923670455348, 'increment': 28, 
    'stepTime': 0.236560751931393, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.236560751931393, 
    'attempts': ' 1U', 'timeIncrement': 0.00281885505683022, 'increment': 29, 
    'stepTime': 0.236560751931393, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.2372654656956, 'attempts': 2, 
    'timeIncrement': 0.000704713764207554, 'increment': 29, 
    'stepTime': 0.2372654656956, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.238322536341911, 
    'attempts': 1, 'timeIncrement': 0.00105707064631133, 'increment': 30, 
    'stepTime': 0.238322536341911, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.239908142311378, 
    'attempts': 1, 'timeIncrement': 0.001585605969467, 'increment': 31, 
    'stepTime': 0.239908142311378, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.242286551265579, 
    'attempts': 1, 'timeIncrement': 0.00237840895420049, 'increment': 32, 
    'stepTime': 0.242286551265579, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.242286551265579, 
    'attempts': ' 1U', 'timeIncrement': 0.00356761343130074, 'increment': 33, 
    'stepTime': 0.242286551265579, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.243178454623404, 
    'attempts': 2, 'timeIncrement': 0.000891903357825186, 'increment': 33, 
    'stepTime': 0.243178454623404, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.244516309660142, 
    'attempts': 1, 'timeIncrement': 0.00133785503673778, 'increment': 34, 
    'stepTime': 0.244516309660142, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.246523092215249, 
    'attempts': 1, 'timeIncrement': 0.00200678255510667, 'increment': 35, 
    'stepTime': 0.246523092215249, 'step': 1, 'jobName': 'Job', 'severe': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.246523092215249, 
    'attempts': ' 1U', 'timeIncrement': 0.00301017383266, 'increment': 36, 
    'stepTime': 0.246523092215249, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.247275635673414, 
    'attempts': 2, 'timeIncrement': 0.000752543458165, 'increment': 36, 
    'stepTime': 0.247275635673414, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.248404450860661, 
    'attempts': 1, 'timeIncrement': 0.0011288151872475, 'increment': 37, 
    'stepTime': 0.248404450860661, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.250097673641532, 
    'attempts': 1, 'timeIncrement': 0.00169322278087125, 'increment': 38, 
    'stepTime': 0.250097673641532, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.252637507812839, 
    'attempts': 1, 'timeIncrement': 0.00253983417130688, 'increment': 39, 
    'stepTime': 0.252637507812839, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.252637507812839, 
    'attempts': ' 1U', 'timeIncrement': 0.00380975125696031, 'increment': 40, 
    'stepTime': 0.252637507812839, 'step': 1, 'jobName': 'Job', 'severe': 1, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.253589945627079, 
    'attempts': 2, 'timeIncrement': 0.000952437814240079, 'increment': 40, 
    'stepTime': 0.253589945627079, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.255018602348439, 
    'attempts': 1, 'timeIncrement': 0.00142865672136012, 'increment': 41, 
    'stepTime': 0.255018602348439, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25716158743048, 'attempts': 1, 
    'timeIncrement': 0.00214298508204018, 'increment': 42, 
    'stepTime': 0.25716158743048, 'step': 1, 'jobName': 'Job', 'severe': 1, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25716158743048, 
    'attempts': ' 1U', 'timeIncrement': 0.00321447762306027, 'increment': 43, 
    'stepTime': 0.25716158743048, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.257965206836245, 
    'attempts': 2, 'timeIncrement': 0.000803619405765066, 'increment': 43, 
    'stepTime': 0.257965206836245, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.259170635944892, 
    'attempts': 1, 'timeIncrement': 0.0012054291086476, 'increment': 44, 
    'stepTime': 0.259170635944892, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.260978779607864, 
    'attempts': 1, 'timeIncrement': 0.0018081436629714, 'increment': 45, 
    'stepTime': 0.260978779607864, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.260978779607864, 
    'attempts': ' 1U', 'timeIncrement': 0.0027122154944571, 'increment': 46, 
    'stepTime': 0.260978779607864, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.261656833481478, 
    'attempts': 2, 'timeIncrement': 0.000678053873614275, 'increment': 46, 
    'stepTime': 0.261656833481478, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.262673914291899, 
    'attempts': 1, 'timeIncrement': 0.00101708081042141, 'increment': 47, 
    'stepTime': 0.262673914291899, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.264199535507531, 
    'attempts': 1, 'timeIncrement': 0.00152562121563212, 'increment': 48, 
    'stepTime': 0.264199535507531, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.264199535507531, 
    'attempts': ' 1U', 'timeIncrement': 0.00228843182344818, 'increment': 49, 
    'stepTime': 0.264199535507531, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.264771643463393, 
    'attempts': 2, 'timeIncrement': 0.000572107955862044, 'increment': 49, 
    'stepTime': 0.264771643463393, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.265629805397187, 
    'attempts': 1, 'timeIncrement': 0.000858161933793066, 'increment': 50, 
    'stepTime': 0.265629805397187, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.266917048297876, 
    'attempts': 1, 'timeIncrement': 0.0012872429006896, 'increment': 51, 
    'stepTime': 0.266917048297876, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.268847912648911, 
    'attempts': 1, 'timeIncrement': 0.0019308643510344, 'increment': 52, 
    'stepTime': 0.268847912648911, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.271744209175462, 
    'attempts': 1, 'timeIncrement': 0.0028962965265516, 'increment': 53, 
    'stepTime': 0.271744209175462, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.271744209175462, 
    'attempts': ' 1U', 'timeIncrement': 0.0043444447898274, 'increment': 54, 
    'stepTime': 0.271744209175462, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.272830320372919, 
    'attempts': 2, 'timeIncrement': 0.00108611119745685, 'increment': 54, 
    'stepTime': 0.272830320372919, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.274459487169104, 
    'attempts': 1, 'timeIncrement': 0.00162916679618527, 'increment': 55, 
    'stepTime': 0.274459487169104, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.274459487169104, 
    'attempts': ' 1U', 'timeIncrement': 0.00244375019427791, 'increment': 56, 
    'stepTime': 0.274459487169104, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.275070424717674, 
    'attempts': 2, 'timeIncrement': 0.000610937548569478, 'increment': 56, 
    'stepTime': 0.275070424717674, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.275986831040528, 
    'attempts': 1, 'timeIncrement': 0.000916406322854217, 'increment': 57, 
    'stepTime': 0.275986831040528, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.277361440524809, 
    'attempts': 1, 'timeIncrement': 0.00137460948428133, 'increment': 58, 
    'stepTime': 0.277361440524809, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.277361440524809, 
    'attempts': ' 1U', 'timeIncrement': 0.00206191422642199, 'increment': 59, 
    'stepTime': 0.277361440524809, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.277876919081415, 
    'attempts': 2, 'timeIncrement': 0.000515478556605497, 'increment': 59, 
    'stepTime': 0.277876919081415, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.278650136916323, 
    'attempts': 1, 'timeIncrement': 0.000773217834908245, 'increment': 60, 
    'stepTime': 0.278650136916323, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 60, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.279809963668685, 
    'attempts': 1, 'timeIncrement': 0.00115982675236237, 'increment': 61, 
    'stepTime': 0.279809963668685, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 61, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.279809963668685, 
    'attempts': ' 1U', 'timeIncrement': 0.00173974012854355, 'increment': 62, 
    'stepTime': 0.279809963668685, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.280244898700821, 
    'attempts': 2, 'timeIncrement': 0.000434935032135888, 'increment': 62, 
    'stepTime': 0.280244898700821, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 62, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.280897301249025, 
    'attempts': 1, 'timeIncrement': 0.000652402548203832, 'increment': 63, 
    'stepTime': 0.280897301249025, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 63, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.281875905071331, 
    'attempts': 1, 'timeIncrement': 0.000978603822305748, 'increment': 64, 
    'stepTime': 0.281875905071331, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 64, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.281875905071331, 
    'attempts': ' 1U', 'timeIncrement': 0.00146790573345862, 'increment': 65, 
    'stepTime': 0.281875905071331, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.282242881504696, 
    'attempts': 2, 'timeIncrement': 0.000366976433364656, 'increment': 65, 
    'stepTime': 0.282242881504696, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 65, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.282793346154742, 
    'attempts': 1, 'timeIncrement': 0.000550464650046983, 'increment': 66, 
    'stepTime': 0.282793346154742, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 66, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.283619043129813, 
    'attempts': 1, 'timeIncrement': 0.000825696975070475, 'increment': 67, 
    'stepTime': 0.283619043129813, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 67, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.284857588592419, 
    'attempts': 1, 'timeIncrement': 0.00123854546260571, 'increment': 68, 
    'stepTime': 0.284857588592419, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 68, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.286715406786327, 
    'attempts': 1, 'timeIncrement': 0.00185781819390857, 'increment': 69, 
    'stepTime': 0.286715406786327, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 69, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.28950213407719, 'attempts': 1, 
    'timeIncrement': 0.00278672729086285, 'increment': 70, 
    'stepTime': 0.28950213407719, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 70, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 1218 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.28950213407719, 
    'attempts': ' 1U', 'timeIncrement': 0.00418009093629428, 'increment': 71, 
    'stepTime': 0.28950213407719, 'step': 1, 'jobName': 'Job', 'severe': 2, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.290547156811264, 
    'attempts': 2, 'timeIncrement': 0.00104502273407357, 'increment': 71, 
    'stepTime': 0.290547156811264, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 71, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.290547156811264, 
    'attempts': ' 1U', 'timeIncrement': 0.00156753410111036, 'increment': 72, 
    'stepTime': 0.290547156811264, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.290939040336541, 
    'attempts': 2, 'timeIncrement': 0.000391883525277589, 'increment': 72, 
    'stepTime': 0.290939040336541, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 72, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.291526865624458, 
    'attempts': 1, 'timeIncrement': 0.000587825287916383, 'increment': 73, 
    'stepTime': 0.291526865624458, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 73, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.292408603556332, 
    'attempts': 1, 'timeIncrement': 0.000881737931874575, 'increment': 74, 
    'stepTime': 0.292408603556332, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 74, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.293731210454144, 
    'attempts': 1, 'timeIncrement': 0.00132260689781186, 'increment': 75, 
    'stepTime': 0.293731210454144, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 75, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.293731210454144, 
    'attempts': ' 1U', 'timeIncrement': 0.00198391034671779, 'increment': 76, 
    'stepTime': 0.293731210454144, 'step': 1, 'jobName': 'Job', 'severe': 1, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.294227188040824, 
    'attempts': 2, 'timeIncrement': 0.000495977586679448, 'increment': 76, 
    'stepTime': 0.294227188040824, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 76, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.294971154420843, 
    'attempts': 1, 'timeIncrement': 0.000743966380019173, 'increment': 77, 
    'stepTime': 0.294971154420843, 'step': 1, 'jobName': 'Job', 'severe': 1, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 77, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.296087103990872, 
    'attempts': 1, 'timeIncrement': 0.00111594957002876, 'increment': 78, 
    'stepTime': 0.296087103990872, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 78, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.296087103990872, 
    'attempts': ' 1U', 'timeIncrement': 0.00167392435504314, 'increment': 79, 
    'stepTime': 0.296087103990872, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.296505585079632, 
    'attempts': 2, 'timeIncrement': 0.000418481088760785, 'increment': 79, 
    'stepTime': 0.296505585079632, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 79, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.297133306712773, 
    'attempts': 1, 'timeIncrement': 0.000627721633141177, 'increment': 80, 
    'stepTime': 0.297133306712773, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 80, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.298074889162485, 
    'attempts': 1, 'timeIncrement': 0.000941582449711765, 'increment': 81, 
    'stepTime': 0.298074889162485, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 81, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.299487262837053, 
    'attempts': 1, 'timeIncrement': 0.00141237367456765, 'increment': 82, 
    'stepTime': 0.299487262837053, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 82, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 18 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.299487262837053, 
    'attempts': ' 1U', 'timeIncrement': 0.00211856051185147, 'increment': 83, 
    'stepTime': 0.299487262837053, 'step': 1, 'jobName': 'Job', 'severe': 3, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.300016902965016, 
    'attempts': 2, 'timeIncrement': 0.000529640127962868, 'increment': 83, 
    'stepTime': 0.300016902965016, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 83, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.30081136315696, 'attempts': 1, 
    'timeIncrement': 0.000794460191944302, 'increment': 84, 
    'stepTime': 0.30081136315696, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 84, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.30081136315696, 
    'attempts': ' 1U', 'timeIncrement': 0.00119169028791645, 'increment': 85, 
    'stepTime': 0.30081136315696, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.301109285728939, 
    'attempts': 2, 'timeIncrement': 0.000297922571979113, 'increment': 85, 
    'stepTime': 0.301109285728939, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 85, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.301556169586908, 
    'attempts': 1, 'timeIncrement': 0.00044688385796867, 'increment': 86, 
    'stepTime': 0.301556169586908, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 86, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.302226495373861, 
    'attempts': 1, 'timeIncrement': 0.000670325786953005, 'increment': 87, 
    'stepTime': 0.302226495373861, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 87, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.302226495373861, 
    'attempts': ' 1U', 'timeIncrement': 0.00100548868042951, 'increment': 88, 
    'stepTime': 0.302226495373861, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.302477867543968, 
    'attempts': 2, 'timeIncrement': 0.000251372170107377, 'increment': 88, 
    'stepTime': 0.302477867543968, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 88, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.302854925799129, 
    'attempts': 1, 'timeIncrement': 0.000377058255161065, 'increment': 89, 
    'stepTime': 0.302854925799129, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 89, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.303420513181871, 
    'attempts': 1, 'timeIncrement': 0.000565587382741598, 'increment': 90, 
    'stepTime': 0.303420513181871, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 90, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.303986100564613, 
    'attempts': 1, 'timeIncrement': 0.000565587382741598, 'increment': 91, 
    'stepTime': 0.303986100564613, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 91, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.304551687947354, 
    'attempts': 1, 'timeIncrement': 0.000565587382741598, 'increment': 92, 
    'stepTime': 0.304551687947354, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 92, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.305117275330096, 
    'attempts': 1, 'timeIncrement': 0.000565587382741598, 'increment': 93, 
    'stepTime': 0.305117275330096, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 93, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.305682862712837, 
    'attempts': 1, 'timeIncrement': 0.000565587382741598, 'increment': 94, 
    'stepTime': 0.305682862712837, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 94, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.305682862712837, 
    'attempts': ' 1U', 'timeIncrement': 0.000848381074112397, 'increment': 95, 
    'stepTime': 0.305682862712837, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.305894957981365, 
    'attempts': 2, 'timeIncrement': 0.000212095268528099, 'increment': 95, 
    'stepTime': 0.305894957981365, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 95, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.306213100884158, 
    'attempts': 1, 'timeIncrement': 0.000318142902792149, 'increment': 96, 
    'stepTime': 0.306213100884158, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 96, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.306690315238346, 
    'attempts': 1, 'timeIncrement': 0.000477214354188223, 'increment': 97, 
    'stepTime': 0.306690315238346, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 97, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.307406136769628, 
    'attempts': 1, 'timeIncrement': 0.000715821531282335, 'increment': 98, 
    'stepTime': 0.307406136769628, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 98, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.307406136769628, 
    'attempts': ' 1U', 'timeIncrement': 0.0010737322969235, 'increment': 99, 
    'stepTime': 0.307406136769628, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.307674569843859, 
    'attempts': 2, 'timeIncrement': 0.000268433074230876, 'increment': 99, 
    'stepTime': 0.307674569843859, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 99, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.308077219455205, 
    'attempts': 1, 'timeIncrement': 0.000402649611346313, 'increment': 100, 
    'stepTime': 0.308077219455205, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 100, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many increments needed to complete the step', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.models['Model-1'].steps['static'].setValues(adaptiveDampingRatio=None, 
    continueDampingFactors=False, stabilizationMethod=NONE)
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u2=-5.0)
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 4744, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 30.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 143 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 7, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': 2, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.40625, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.40625, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.40625, 'attempts': ' 1U', 
    'timeIncrement': 0.09375, 'increment': 4, 'stepTime': 0.40625, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.453125, 'attempts': 2, 
    'timeIncrement': 0.046875, 'increment': 4, 'stepTime': 0.453125, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.453125, 'attempts': ' 1U', 
    'timeIncrement': 0.046875, 'increment': 5, 'stepTime': 0.453125, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.4765625, 'attempts': 2, 
    'timeIncrement': 0.0234375, 'increment': 5, 'stepTime': 0.4765625, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.4765625, 'attempts': ' 1U', 
    'timeIncrement': 0.03515625, 'increment': 6, 'stepTime': 0.4765625, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.494140625, 'attempts': 2, 
    'timeIncrement': 0.017578125, 'increment': 6, 'stepTime': 0.494140625, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 11, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.51171875, 'attempts': 1, 
    'timeIncrement': 0.017578125, 'increment': 7, 'stepTime': 0.51171875, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.529296875, 'attempts': 1, 
    'timeIncrement': 0.017578125, 'increment': 8, 'stepTime': 0.529296875, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.529296875, 'attempts': ' 1U', 
    'timeIncrement': 0.0263671875, 'increment': 9, 'stepTime': 0.529296875, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.535888671875, 'attempts': 2, 
    'timeIncrement': 0.006591796875, 'increment': 9, 
    'stepTime': 0.535888671875, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.535888671875, 
    'attempts': ' 1U', 'timeIncrement': 0.006591796875, 'increment': 10, 
    'stepTime': 0.535888671875, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.535888671875, 
    'attempts': ' 2U', 'timeIncrement': 0.00164794921875, 'increment': 10, 
    'stepTime': 0.535888671875, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.535888671875, 
    'attempts': ' 3U', 'timeIncrement': 0.000823974609375, 'increment': 10, 
    'stepTime': 0.535888671875, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.535888671875, 
    'attempts': ' 4U', 'timeIncrement': 0.0004119873046875, 'increment': 10, 
    'stepTime': 0.535888671875, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.535888671875, 
    'attempts': ' 5U', 'timeIncrement': 0.00020599365234375, 'increment': 10, 
    'stepTime': 0.535888671875, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    formulation=FRICTIONLESS)
mdb.models['Model-1'].interactionProperties['IntProp-1'].normalBehavior.setValues(
    allowSeparation=ON, clearanceAtZeroContactPressure=0.0, 
    constraintEnforcementMethod=AUGMENTED_LAGRANGE, contactStiffness=DEFAULT, 
    contactStiffnessScaleFactor=1.0, pressureOverclosure=HARD)
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 13264, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 30.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 10 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 9 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': 2, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.40625, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.40625, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.40625, 'attempts': ' 1U', 
    'timeIncrement': 0.09375, 'increment': 4, 'stepTime': 0.40625, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.453125, 'attempts': 2, 
    'timeIncrement': 0.046875, 'increment': 4, 'stepTime': 0.453125, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.453125, 'attempts': ' 1U', 
    'timeIncrement': 0.046875, 'increment': 5, 'stepTime': 0.453125, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.4765625, 'attempts': 2, 
    'timeIncrement': 0.0234375, 'increment': 5, 'stepTime': 0.4765625, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.4765625, 'attempts': ' 1U', 
    'timeIncrement': 0.03515625, 'increment': 6, 'stepTime': 0.4765625, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.494140625, 'attempts': 2, 
    'timeIncrement': 0.017578125, 'increment': 6, 'stepTime': 0.494140625, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 11, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.51171875, 'attempts': 1, 
    'timeIncrement': 0.017578125, 'increment': 7, 'stepTime': 0.51171875, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.529296875, 'attempts': 1, 
    'timeIncrement': 0.017578125, 'increment': 8, 'stepTime': 0.529296875, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.529296875, 'attempts': ' 1U', 
    'timeIncrement': 0.017578125, 'increment': 9, 'stepTime': 0.529296875, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.53369140625, 'attempts': 2, 
    'timeIncrement': 0.00439453125, 'increment': 9, 'stepTime': 0.53369140625, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.53369140625, 
    'attempts': ' 1U', 'timeIncrement': 0.00439453125, 'increment': 10, 
    'stepTime': 0.53369140625, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.53369140625, 
    'attempts': ' 2U', 'timeIncrement': 0.0010986328125, 'increment': 10, 
    'stepTime': 0.53369140625, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.53369140625, 
    'attempts': ' 3U', 'timeIncrement': 0.00054931640625, 'increment': 10, 
    'stepTime': 0.53369140625, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.53369140625, 
    'attempts': ' 4U', 'timeIncrement': 0.000274658203125, 'increment': 10, 
    'stepTime': 0.53369140625, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.53369140625, 
    'attempts': ' 5U', 'timeIncrement': 0.0001373291015625, 'increment': 10, 
    'stepTime': 0.53369140625, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    formulation=FRICTIONLESS)
mdb.models['Model-1'].interactionProperties['IntProp-1'].normalBehavior.setValues(
    allowSeparation=ON, clearanceAtZeroContactPressure=0.0, 
    constraintEnforcementMethod=PENALTY, contactStiffness=DEFAULT, 
    contactStiffnessScaleFactor=1.0, lowerQuadraticRatio=0.33333, 
    pressureOverclosure=HARD, stiffnessBehavior=NONLINEAR, stiffnessRatio=0.01, 
    upperQuadraticFactor=0.03)
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 10496, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 30.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 10 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 6, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': 2, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.40625, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 3, 'stepTime': 0.40625, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 4, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 11, 'phase': STANDARD_PHASE, 
    'equilibrium': 10})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.5, 'attempts': ' 1U', 
    'timeIncrement': 0.09375, 'increment': 5, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.5, 'attempts': ' 2U', 
    'timeIncrement': 0.0234375, 'increment': 5, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.51171875, 'attempts': 3, 
    'timeIncrement': 0.01171875, 'increment': 5, 'stepTime': 0.51171875, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.5234375, 'attempts': 1, 
    'timeIncrement': 0.01171875, 'increment': 6, 'stepTime': 0.5234375, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 11, 
    'phase': STANDARD_PHASE, 'equilibrium': 11})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.5322265625, 'attempts': 1, 
    'timeIncrement': 0.0087890625, 'increment': 7, 'stepTime': 0.5322265625, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 15, 
    'phase': STANDARD_PHASE, 'equilibrium': 15})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.5322265625, 'attempts': ' 1U', 
    'timeIncrement': 0.006591796875, 'increment': 8, 'stepTime': 0.5322265625, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.5355224609375, 'attempts': 2, 
    'timeIncrement': 0.0032958984375, 'increment': 8, 
    'stepTime': 0.5355224609375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 11, 'phase': STANDARD_PHASE, 'equilibrium': 11})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.5355224609375, 
    'attempts': ' 1U', 'timeIncrement': 0.002471923828125, 'increment': 9, 
    'stepTime': 0.5355224609375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.5355224609375, 
    'attempts': ' 2U', 'timeIncrement': 0.0012359619140625, 'increment': 9, 
    'stepTime': 0.5355224609375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.5355224609375, 
    'attempts': ' 3U', 'timeIncrement': 0.000308990478515625, 'increment': 9, 
    'stepTime': 0.5355224609375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.5355224609375, 
    'attempts': ' 4U', 'timeIncrement': 7.72476196289063e-05, 'increment': 9, 
    'stepTime': 0.5355224609375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.5355224609375, 
    'attempts': ' 5U', 'timeIncrement': 1.93119049072266e-05, 'increment': 9, 
    'stepTime': 0.5355224609375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    formulation=FRICTIONLESS)
mdb.models['Model-1'].interactionProperties['IntProp-1'].normalBehavior.setValues(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u2=-2.0)
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 1360, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 30.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'equilibrium': 7})
mdb.jobs['Job']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_COMPLETED, {'time': 'Thu Sep  9 16:03:59 2021', 
    'jobName': 'Job'})
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((0.4, 
    0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 13896, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 30.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 11, 'phase': STANDARD_PHASE, 
    'equilibrium': 8})
mdb.jobs['Job']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_COMPLETED, {'time': 'Thu Sep  9 16:05:40 2021', 
    'jobName': 'Job'})
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    400.0, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 6248, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 30.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'equilibrium': 6})
mdb.jobs['Job']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_COMPLETED, {'time': 'Thu Sep  9 16:06:36 2021', 
    'jobName': 'Job'})
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    400000000000.0, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 16312, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 30.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.809 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.789 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.759 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.45 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1587 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1586 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.44 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1047 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1081 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.900 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1082 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.410 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.871 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.835 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1625 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1161 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.381 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1132 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.47 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.201 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.385 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1208 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.199 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.952 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1037 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1058 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1150 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1634 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1112 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1172 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.74 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.378 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.75 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.113 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.724 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1624 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.773 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.707 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.732 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.838 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.913 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.116 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1229 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1242 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.435 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1227 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1102 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1115 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1122 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1092 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1147 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.358 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1245 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1195 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1310 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1318 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1307 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1613 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1330 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1293 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1378 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1498 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1440 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1536 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.461 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.980 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1539 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1526 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1553 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1513 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.363 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.207 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1399 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1013 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.300 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.811 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.298 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.796 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1617 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.666 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.701 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.918 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.780 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.384 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.786 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.825 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.781 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.743 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.765 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.719 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.603 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.663 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1212 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.181 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1070 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1017 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1110 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1063 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1062 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.191 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1066 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1567 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1209 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1180 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1181 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1165 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.715 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.650 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1060 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.905 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.297 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.840 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.248 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1039 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.247 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.866 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.793 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.338 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.619 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1570 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1183 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1219 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1194 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.160 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.159 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1171 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1244 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.296 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.158 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.149 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1276 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.295 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1291 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1621 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1424 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1236 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.8 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1015 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.90 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1364 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.916 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1104 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.334 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1314 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.18 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1391 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1341 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.291 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.17 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.414 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.156 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.415 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1425 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1446 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1390 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1283 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.161 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.472 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1532 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.351 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.145 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1443 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1550 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1542 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1436 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1530 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.133 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1497 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1602 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1471 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing element PART.1510 D.O.F. 1.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 809 INSTANCE PART INTERNAL NODE 1195 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 789 INSTANCE PART INTERNAL NODE 1215 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 759 INSTANCE PART INTERNAL NODE 1245 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 45 INSTANCE PART INTERNAL NODE 1959 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 1587 INSTANCE PART INTERNAL NODE 417 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 1586 INSTANCE PART INTERNAL NODE 418 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 44 INSTANCE PART INTERNAL NODE 1960 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 1047 INSTANCE PART INTERNAL NODE 957 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 1081 INSTANCE PART INTERNAL NODE 923 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 900 INSTANCE PART INTERNAL NODE 1104 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 1082 INSTANCE PART INTERNAL NODE 922 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 410 INSTANCE PART INTERNAL NODE 1594 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 871 INSTANCE PART INTERNAL NODE 1133 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 835 INSTANCE PART INTERNAL NODE 1169 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 1625 INSTANCE PART INTERNAL NODE 379 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 1161 INSTANCE PART INTERNAL NODE 843 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 381 INSTANCE PART INTERNAL NODE 1623 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 1132 INSTANCE PART INTERNAL NODE 872 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 47 INSTANCE PART INTERNAL NODE 1957 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 201 INSTANCE PART INTERNAL NODE 1803 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 385 INSTANCE PART INTERNAL NODE 1619 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 1208 INSTANCE PART INTERNAL NODE 796 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 199 INSTANCE PART INTERNAL NODE 1805 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 952 INSTANCE PART INTERNAL NODE 1052 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 1037 INSTANCE PART INTERNAL NODE 967 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 1058 INSTANCE PART INTERNAL NODE 946 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 1150 INSTANCE PART INTERNAL NODE 854 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'SOLVER PROBLEM.  ZERO PIVOT WHEN PROCESSING ELEMENT 1634 INSTANCE PART INTERNAL NODE 370 D.O.F. 1', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Warning message limit reached. No further warning messages will be reported.\nPlease see the dat file for more warnings.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'equilibrium': 6})
mdb.jobs['Job']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_COMPLETED, {'time': 'Thu Sep  9 16:07:23 2021', 
    'jobName': 'Job'})
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    1e-05, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['indenter'].features['2D Analytic rigid shell-1'].sketch)
mdb.models['Model-1'].parts['indenter'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['indenter'].features['2D Analytic rigid shell-1'])
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 16248, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 29.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 11, 'phase': STANDARD_PHASE, 
    'equilibrium': 8})
mdb.jobs['Job']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_COMPLETED, {'time': 'Thu Sep  9 16:08:44 2021', 
    'jobName': 'Job'})
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['part'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['part'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['part'].features['Shell planar-1'])
mdb.models['Model-1'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[14], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[3], textPoint=(
    14.1489362716675, 17.071044921875), value=10.0)
mdb.models['Model-1'].parts['part'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['part'].regenerate()
mdb.models['Model-1'].parts['part'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 2316, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 29.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_COMPLETED, {'time': 'Thu Sep  9 16:14:13 2021', 
    'jobName': 'Job'})
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u2=-10.0)
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 12588, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 29.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 102 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 2U', 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.265625, 'attempts': 3, 
    'timeIncrement': 0.015625, 'increment': 2, 'stepTime': 0.265625, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.265625, 'attempts': ' 1U', 
    'timeIncrement': 0.0234375, 'increment': 3, 'stepTime': 0.265625, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.271484375, 'attempts': 2, 
    'timeIncrement': 0.005859375, 'increment': 3, 'stepTime': 0.271484375, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.271484375, 'attempts': ' 1U', 
    'timeIncrement': 0.0087890625, 'increment': 4, 'stepTime': 0.271484375, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.271484375, 'attempts': ' 2U', 
    'timeIncrement': 0.002197265625, 'increment': 4, 'stepTime': 0.271484375, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.271484375, 'attempts': ' 3U', 
    'timeIncrement': 0.00054931640625, 'increment': 4, 'stepTime': 0.271484375, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.271484375, 'attempts': ' 4U', 
    'timeIncrement': 0.0001373291015625, 'increment': 4, 
    'stepTime': 0.271484375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.271484375, 'attempts': ' 5U', 
    'timeIncrement': 3.4332275390625e-05, 'increment': 4, 
    'stepTime': 0.271484375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.models['Model-1'].parts['part'].deleteMesh()
mdb.models['Model-1'].parts['part'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.1)
mdb.models['Model-1'].parts['part'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.0)
mdb.models['Model-1'].parts['part'].generateMesh()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].steps['static'].setValues(solutionTechnique=QUASI_NEWTON)
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 8616, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 30.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 102 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'equilibrium': 7})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.3125, 'attempts': 2, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'equilibrium': 9})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 296 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.375, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 3, 'stepTime': 0.375, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.4375, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 4, 'stepTime': 0.4375, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 7})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.4375, 'attempts': ' 1U', 
    'timeIncrement': 0.0625, 'increment': 5, 'stepTime': 0.4375, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.453125, 'attempts': 2, 
    'timeIncrement': 0.015625, 'increment': 5, 'stepTime': 0.453125, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.453125, 'attempts': ' 1U', 
    'timeIncrement': 0.015625, 'increment': 6, 'stepTime': 0.453125, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'equilibrium': 10})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.45703125, 'attempts': 2, 
    'timeIncrement': 0.00390625, 'increment': 6, 'stepTime': 0.45703125, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.462890625, 'attempts': 1, 
    'timeIncrement': 0.005859375, 'increment': 7, 'stepTime': 0.462890625, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 195 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.462890625, 'attempts': ' 1U', 
    'timeIncrement': 0.0087890625, 'increment': 8, 'stepTime': 0.462890625, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.465087890625, 'attempts': 2, 
    'timeIncrement': 0.002197265625, 'increment': 8, 
    'stepTime': 0.465087890625, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.465087890625, 
    'attempts': ' 1U', 'timeIncrement': 0.0032958984375, 'increment': 9, 
    'stepTime': 0.465087890625, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.465911865234375, 
    'attempts': 2, 'timeIncrement': 0.000823974609375, 'increment': 9, 
    'stepTime': 0.465911865234375, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.467147827148438, 
    'attempts': 1, 'timeIncrement': 0.0012359619140625, 'increment': 10, 
    'stepTime': 0.467147827148438, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.467147827148438, 
    'attempts': ' 1U', 'timeIncrement': 0.00185394287109375, 'increment': 11, 
    'stepTime': 0.467147827148438, 'step': 1, 'jobName': 'Job', 'severe': 4, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.467611312866211, 
    'attempts': 2, 'timeIncrement': 0.000463485717773438, 'increment': 11, 
    'stepTime': 0.467611312866211, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 12 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.467611312866211, 
    'attempts': ' 1U', 'timeIncrement': 0.000695228576660156, 'increment': 12, 
    'stepTime': 0.467611312866211, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.467785120010376, 
    'attempts': 2, 'timeIncrement': 0.000173807144165039, 'increment': 12, 
    'stepTime': 0.467785120010376, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.467785120010376, 
    'attempts': ' 1U', 'timeIncrement': 0.000260710716247559, 'increment': 13, 
    'stepTime': 0.467785120010376, 'step': 1, 'jobName': 'Job', 'severe': 3, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.467850297689438, 
    'attempts': 2, 'timeIncrement': 6.51776790618896e-05, 'increment': 13, 
    'stepTime': 0.467850297689438, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 8835 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.467850297689438, 
    'attempts': ' 1U', 'timeIncrement': 9.77665185928345e-05, 'increment': 14, 
    'stepTime': 0.467850297689438, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.467874739319086, 
    'attempts': 2, 'timeIncrement': 2.44416296482086e-05, 'increment': 14, 
    'stepTime': 0.467874739319086, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 374 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.467874739319086, 
    'attempts': ' 1U', 'timeIncrement': 3.66624444723129e-05, 'increment': 15, 
    'stepTime': 0.467874739319086, 'step': 1, 'jobName': 'Job', 'severe': 1, 
    'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.467884739319086, 
    'attempts': 2, 'timeIncrement': 1e-05, 'increment': 15, 
    'stepTime': 0.467884739319086, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.467884739319086, 
    'attempts': ' 1U', 'timeIncrement': 1.5e-05, 'increment': 16, 
    'stepTime': 0.467884739319086, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.467894739319086, 
    'attempts': 2, 'timeIncrement': 1e-05, 'increment': 16, 
    'stepTime': 0.467894739319086, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.467894739319086, 
    'attempts': ' 1U', 'timeIncrement': 1.5e-05, 'increment': 17, 
    'stepTime': 0.467894739319086, 'step': 1, 'jobName': 'Job', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 269 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.467894739319086, 
    'attempts': ' 2U', 'timeIncrement': 1e-05, 'increment': 17, 
    'stepTime': 0.467894739319086, 'step': 1, 'jobName': 'Job', 'severe': 1, 
    'iterations': 11, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u2=-4.0)
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 6348, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 30.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 13 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 74 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'equilibrium': 9})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.75, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 3, 'stepTime': 0.75, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 6})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.75, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 4, 'stepTime': 0.75, 'step': 1, 
    'jobName': 'Job', 'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.8125, 'attempts': 2, 
    'timeIncrement': 0.0625, 'increment': 4, 'stepTime': 0.8125, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 7})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.875, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 5, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.9375, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 6, 'stepTime': 0.9375, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 10 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.9375, 'attempts': ' 1U', 
    'timeIncrement': 0.0625, 'increment': 7, 'stepTime': 0.9375, 'step': 1, 
    'jobName': 'Job', 'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.953125, 'attempts': 2, 
    'timeIncrement': 0.015625, 'increment': 7, 'stepTime': 0.953125, 'step': 1, 
    'jobName': 'Job', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 48 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.953125, 'attempts': ' 1U', 
    'timeIncrement': 0.0234375, 'increment': 8, 'stepTime': 0.953125, 
    'step': 1, 'jobName': 'Job', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.958984375, 'attempts': 2, 
    'timeIncrement': 0.005859375, 'increment': 8, 'stepTime': 0.958984375, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 4162 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.9677734375, 'attempts': 1, 
    'timeIncrement': 0.0087890625, 'increment': 9, 'stepTime': 0.9677734375, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.98095703125, 'attempts': 1, 
    'timeIncrement': 0.01318359375, 'increment': 10, 'stepTime': 0.98095703125, 
    'step': 1, 'jobName': 'Job', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.98095703125, 
    'attempts': ' 1U', 'timeIncrement': 0.01904296875, 'increment': 11, 
    'stepTime': 0.98095703125, 'step': 1, 'jobName': 'Job', 'severe': 2, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 1116 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.98095703125, 
    'attempts': ' 2U', 'timeIncrement': 0.0047607421875, 'increment': 11, 
    'stepTime': 0.98095703125, 'step': 1, 'jobName': 'Job', 'severe': 2, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 1188 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.98095703125, 
    'attempts': ' 3U', 'timeIncrement': 0.001190185546875, 'increment': 11, 
    'stepTime': 0.98095703125, 'step': 1, 'jobName': 'Job', 'severe': 1, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 1416 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.98095703125, 
    'attempts': ' 4U', 'timeIncrement': 0.00029754638671875, 'increment': 11, 
    'stepTime': 0.98095703125, 'step': 1, 'jobName': 'Job', 'severe': 1, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 1453 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.98095703125, 
    'attempts': ' 5U', 'timeIncrement': 7.43865966796875e-05, 'increment': 11, 
    'stepTime': 0.98095703125, 'step': 1, 'jobName': 'Job', 'severe': 1, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 1453 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. OUTPUT FOR THE LAST CONVERGED INCREMENT HAS NOT BEEN WRITTEN DUE TO CONVERGENCE ISSUES.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job'})
mdb.jobs['Job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job'})
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u2=-2.0)
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 6140, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 30.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job', 'severe': 3, 'iterations': 11, 'phase': STANDARD_PHASE, 
    'equilibrium': 8})
mdb.jobs['Job']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_COMPLETED, {'time': 'Thu Sep  9 18:37:53 2021', 
    'jobName': 'Job'})
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u2=-3.0)
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 15628, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 30.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 9 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job', 'severe': 5, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Job', 'severe': 2, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 6})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'equilibrium': 8})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 0.75, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 3, 'stepTime': 0.75, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'equilibrium': 9})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.25, 'increment': 4, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job', 'severe': 1, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 6})
mdb.jobs['Job']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_COMPLETED, {'time': 'Thu Sep  9 18:38:55 2021', 
    'jobName': 'Job'})
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=5.0)
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PATH BASED TRACKING IS DEFINED IN CONTACT PAIR (ASSEMBLY__PICKEDSURF10,ASSEMBLY_INDENTER-1_RIGIDSURFACE_). PATH BASED TRACKING CANNOT BE USED WITH ANALYTICAL RIGID MAIN SURFACES, THE STATE BASED TRACKING ALGORITHM WILL BE USED INSTEAD.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job.odb', 'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-G86FQHS', 'handle': 16380, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job', 'memory': 30.0})
mdb.jobs['Job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8039.0, 'jobName': 'Job'})
mdb.jobs['Job']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job'})
mdb.jobs['Job']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job', 'severe': 5, 'iterations': 14, 'phase': STANDARD_PHASE, 
    'equilibrium': 9})
mdb.jobs['Job']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job'})
mdb.jobs['Job']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job'})
mdb.jobs['Job']._Message(JOB_COMPLETED, {'time': 'Thu Sep  9 18:39:37 2021', 
    'jobName': 'Job'})
#* MdbError: invalid filename
# Save by user on 2021_09_09-18.43.59; build 2021.HF4 2020_11_25-20.39.27 167889
# Save by user on 2021_09_09-18.48.59; build 2021.HF4 2020_11_25-20.39.27 167889
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].boundaryConditions['indenter'].setValues(u1=0.0, u2=
    0.050183952461055004)
#* ValueError: Non-zero boundary condition in initial step.
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=5.2, u2=-3.2)
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.0, u2=0.050183952461055004)
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.0, u2=0.050183952461055004)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    4.190726528461682, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
# Save by user on 2021_09_09-19.16.16; build 2021.HF4 2020_11_25-20.39.27 167889
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.494458257530359, u2=-1.1861663446573514)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    115.05545133521257, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.7234250759643297, u2=-2.857071488588757)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    609.0669302129421, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.0608974466633505, u2=-2.2227824312530746)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    133.3918307950241, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.7391830861314874, u2=-1.8361096041714062)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    240.59037937572882, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.3014577810008126, u2=-0.5524540572830658)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    327.13972867208395, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.6231941336928788, u2=-0.5523841089749877)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    859.1376318111068, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.8544160233215652, u2=-0.2684424752877784)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    666.0905470078127, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.011094303562075, u2=-2.611910822747312)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    541.1626711211915, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.50468709322538, u2=-1.8432335340553057)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    29.014795410535978, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.4873194783041823, u2=-2.153410475608532)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    733.7485625319866, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.0064408997135437, u2=-0.1596950334578271)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    394.9506234809874, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.3017981889696402, u2=-2.9127385712697835)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    802.0473165815479, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.8823063956106536, u2=-2.514083658321223)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    254.42187143875344, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.097337177080216, u2=-0.7157834209670008)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    56.88587976621515, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.11298798710534852, u2=-0.6272924049005918)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    866.6487742505593, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.582877193130367, u2=-0.631873078574958)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    221.02977485537542, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.229895429470134, u2=-0.9823025045826593)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    404.9900430578116, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.1119383961227587, u2=-1.6217936517334899)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    316.0971549217377, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.4716941295154866, u2=-1.3526405540621358)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    76.66362333374727, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.6107232247006533, u2=-0.9445645065743214)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    843.2248510050104, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.6493587571382928, u2=-1.8743733946949006)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    848.9392988057137, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.3707389243124126, u2=-0.5045321958909214)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    971.4651199702965, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.4694517746012705, u2=-0.9472194807521326)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    385.3775290182237, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.6365507205133132, u2=-1.162449345551706)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    954.4881706205401, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.6066645571970177, u2=-1.4226029542294043)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    445.758915081358, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.3500123755332383, u2=-2.3770102880397395)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    669.724981997156, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.7618716310117177, u2=-0.6790539682592432)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    82.50096719710572, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.5016362383685227, u2=-1.5912798713994738)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    897.0986828829543, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.399811747032648, u2=-1.8180022496999233)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    298.004202685262, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.448111308653461, u2=-0.2347061968879934)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    262.30556029155883, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.500812411659911, u2=-1.8618800705141714)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    5.1305439349078865, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.2426563317615704, u2=-0.5945199586931454)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    543.2029720778906, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.0626508200071687, u2=-0.2886496196573106)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    475.59689141088614, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.8575637549103532, u2=-2.8517680580346663)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    636.374041197845, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.9968303783133887, u2=-2.9003328959162222)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    978.204155877872, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.3139900925474062, u2=-2.4443523095377375)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    908.6628491683299, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.4933478893837604, u2=-0.983379930602775)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    910.1531656270809, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.2356063621846767, u2=-0.3832491306185132)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    525.2561458514743, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.7360353138292126, u2=-2.084275776885255)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    104.01984583581306, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.691473837125139, u2=-1.376442231844844)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    180.91541434330574, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.9202672134403835, u2=-0.45391088104985855)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    953.0402679465205, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.329003849939169, u2=-1.5360130393226836)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    411.95357143337526, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.876489754032884, u2=-0.19972671123413335)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    865.0172555900612, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.2358941722105916, u2=-2.737029166028468)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    672.1776072988966, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.5336140446876618, u2=-0.850461946640049)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    628.7861670963654, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.3040207607789935, u2=-2.0213146246265477)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    275.55950109017544, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.9576887959977718, u2=-1.0039621206592917)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    896.7473729935929, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.2462304146031133, u2=-1.6081972614156514)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    206.8921644519939, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.1433859876042796, u2=-1.685459810095511)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    404.4058386701645, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.3195690327282443, u2=-0.6360779210240284)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    993.5724988216111, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.1510148781693812, u2=-2.91179542051722)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    735.7273457800392, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.4051477869943882, u2=-2.347885187747232)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    445.0619674282702, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.6147416697992343, u2=-2.8245469305361484)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    560.6636087805655, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.1507741404922118, u2=-2.6949993162401817)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    411.2560778311461, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.3044305220596606, u2=-1.833909938552147)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    726.9882649799965, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.3409551253537553, u2=-2.7734352815670387)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    399.19748670718883, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.062277489945421, u2=-0.3566282559505666)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    670.1454945572171, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.9827304558275438, u2=-0.6683503010155211)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    704.7159031649336, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.6568508534706865, u2=-0.23115913784056039)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    609.5602616991745, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.0879289560932062, u2=-1.0434579592134665)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    540.0349241471919, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.177896421449943, u2=-1.227164140099498)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    206.08264483145086, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.469039543402591, u2=-0.8869121921442981)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    199.16227746122527, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.8920428936724898, u2=-2.5033387765405952)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    795.7390690771794, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.978487184991847, u2=-1.134584647411409)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    290.3334874379788, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.8374177003755463, u2=-0.9147100780934042)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    655.963171861026, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.5543135044068814, u2=-1.6738186411589207)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    299.617476190249, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.4020391402656966, u2=-0.5086802524268117)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    144.47923394445033, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.7187315415036322, u2=-2.426371244186715)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    403.9572630238025, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.12448982197982694, u2=-0.3161968666713354)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    310.2702165750629, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.0714854253185442, u2=-2.9619721161415002)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    243.398772882946, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.3776621761025143, u2=-2.3395098309603064)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    588.1044545543334, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.3496150433488894, u2=-0.6762754764490999)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    245.34400762010685, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.6380970549078846, u2=-0.11601413965844697)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    747.7708640222513, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.46957722644936517, u2=-2.464838142519019)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    720.1469277075751, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.731283323377026, u2=-2.1498862971580897)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    695.2611716942259, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.777819826665207, u2=-2.2141207873188633)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    102.74367583043312, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.8146729866142826, u2=-2.336684005389243)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    943.6424845418629, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.218136433198552, u2=-0.3147294900288621)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    503.3401295531489, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.4236028538202108, u2=-1.1395506127783905)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    899.6737196937934, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.0955190011577516, u2=-0.4360202726228761)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    198.58068585642948, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.398746129058689, u2=-2.6029999350392212)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    594.4495923692439, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.8693232049916002, u2=-1.907564567799918)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    965.4086162686816, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.09000446757137137, u2=-1.0596042720726826)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    998.6982471984411, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.13237605898588, u2=-0.2843192158294685)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    24.16960081191964, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.804337438664676, u2=-1.0018487329754204)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    481.30385215198316, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.8476516186469991, u2=-1.0430316338775665)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    291.4233982509183, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.9774191507661287, u2=-2.215857917180386)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    63.72150459674622, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.6004385390731262, u2=-1.9489166669301181)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    569.62482931866, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.15952663238503773, u2=-2.672916953471347)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    5.084279615929343, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.4563417330119073, u2=-1.469423282969653)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    611.277978392432, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.3904600677788128, u2=-0.44682331322107494)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    870.1816068531124, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.04543445215479602, u2=-2.1684098829466856)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    883.6015813724242, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.09790826953968557, u2=-2.3062766409890028)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    954.3195288765551, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.111033443865767, u2=-1.727703872951539)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    739.8640799396543, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.3764667385374514, u2=-2.335804821868227)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    184.71377283613126, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.18721065518878977, u2=-1.5320072294567333)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    434.6788864084842, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.3107136088616045, u2=-1.6159252052077828)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    885.8996096483778, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.255597536293611, u2=-1.339868953239794)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    255.04702528851615, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.6467773288467473, u2=-0.17371546755787604)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    443.3132514162893, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.9900324627274171, u2=-0.41288513828058293)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    616.9373588839193, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.8704224377613947, u2=-0.19114463849152935)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    103.35340752564358, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.8827650969836456, u2=-1.9455901926649632)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    490.11017095940144, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.8301573990832312, u2=-1.0116323451213474)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    44.70535773134448, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.0652536547032363, u2=-1.5748550043776381)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    311.62815768168144, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.979344874939016, u2=-2.73194277438567)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    752.0399343263387, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.9625140399296326, u2=-0.8229474645317373)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    715.4993710289782, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.3780847765122246, u2=-1.2901104768033262)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    941.5543022040732, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.2067223119677069, u2=-2.291098301774841)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    776.8955898134027, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.853214393341701, u2=-0.7635146799257051)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    215.22929975867123, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.9415426762251764, u2=-0.3232417385034997)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    904.97127566207, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.5612278174104475, u2=-0.9402792134499273)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    552.2645947472565, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.0137429620208565, u2=-0.5675417330366128)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    844.8980426789686, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.5033000770331062, u2=-2.7961231917934617)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    922.4895612835568, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.8939364704279704, u2=-2.443549100736809)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    828.9614499778629, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.5377978216066936, u2=-1.9368708938802282)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    394.19860376172835, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.489840696271144, u2=-2.6272357115443814)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    598.18853839399, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.5182396783853784, u2=-2.430649023007432)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    432.69864686552063, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.3053923042537818, u2=-0.6410531707695039)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    694.1474415998151, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.6622440528023255, u2=-2.6884210956209356)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    484.68700491713685, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.8773023579765624, u2=-1.6640925015553871)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    128.26121331573168, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.898717505308194, u2=-2.4415764499757815)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    644.370852243317, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.432641735670048, u2=-2.6986647697781305)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    204.70701146443903, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.5466664643858277, u2=-1.0222100774184053)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    744.957380575104, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.2024603502694218, u2=-0.4191505811302626)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    105.61810078537626, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.733377596302419, u2=-0.7610119713716308)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    7.31048641443103, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.2544748292737484, u2=-1.3386125870161434)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    334.48965706394074, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.141316820585587, u2=-2.47224282117523)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    969.255534575552, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.6418615524506972, u2=-2.596118691443396)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    700.9759884576149, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.5673091116655762, u2=-0.12016117854045305)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    413.68612104780163, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.025188054695069, u2=-1.5811671774749407)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    120.75304976361696, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.447929729391344, u2=-1.310491909131459)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    60.36448398800931, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.7776122621300505, u2=-0.7441126503651176)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    726.2119475491013, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.6650508747888813, u2=-0.44760956526768014)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    905.4510788624892, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.3355341009857007, u2=-1.079083997070521)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    16.026901906201008, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.101323210933967, u2=-2.834438141346306)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    584.1412465727561, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.603773513059572, u2=-1.0372885028601901)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    728.6043216045013, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.912408996554723, u2=-1.6044928030557617)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    292.1982520784639, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.3609996464687164, u2=-2.138754980796016)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    522.7980935296273, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.807027647523268, u2=-1.1545258468999526)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    814.8520713987314, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.4958427306634647, u2=-2.918168039890786)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    596.3273838498856, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.2600928619528637, u2=-2.8910971553321225)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    378.5559608962304, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.648820091801192, u2=-0.830168657893556)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    77.55872793716544, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.8151521996982454, u2=-1.542020667087918)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    486.90668932591007, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.43275233258543944, u2=-0.972547098468632)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    468.1944378760191, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.6105723494962252, u2=-0.9260374336946561)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    181.5355751945939, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.8065027924079287, u2=-0.20697214732814512)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    70.13686432730273, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.4417762137798018, u2=-1.867736568541701)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    508.4014237454743, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.3374089665937694, u2=-1.5577691673636984)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    331.8524029795432, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.012935069313719794, u2=-0.2492883786249691)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    214.4986058490941, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.7046623514354735, u2=-0.9080747462861731)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    94.65779955754203, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.3319627701303318, u2=-2.733971069303296)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    837.9306907391883, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.047200755645094, u2=-0.79472948293422)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    355.113115288294, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.812297784189096, u2=-0.520195129064547)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    826.7852454373409, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.7529050077784261, u2=-1.5194130048049328)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    25.963243269675772, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.346537503053683, u2=-2.958386316920742)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    2.240574913775947, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.894704511509132, u2=-0.8019602873833511)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    924.4178268966152, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.565194292088157, u2=-2.0491930874770476)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    673.9335770743708, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.3429141054815696, u2=-2.308696884453281)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    994.8145852916283, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.16988130790876577, u2=-0.789148877577959)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    479.5055419356464, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.6571188273223094, u2=-2.2118274109743927)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    159.1383374164848, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.1436074457595744, u2=-1.1665710848858344)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    952.2831004953434, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.3630250870915184, u2=-1.9336869087213806)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    166.0710074743233, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.7527945728913732, u2=-1.9372361612065947)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    369.28593775774647, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.2773596337160082, u2=-1.6537465838167997)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    934.5600493102909, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.4273604943874654, u2=-0.3618403331577841)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    81.64205458401146, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.9007946828219784, u2=-2.52237723720879)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    453.9626606517675, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.9800876194539945, u2=-1.0302621884180339)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    887.2907043699117, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.652905245860051, u2=-0.6409036801595772)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    319.4057408805771, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.41147449911021017, u2=-0.21824791050881537)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    962.6579750577735, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.8860982376053057, u2=-1.8135895352459013)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    997.3726029758882, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.472584151117548, u2=-2.064936649342619)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    486.01603804434717, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.6015817615551624, u2=-0.14810470389078284)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    321.29226714242475, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.3879591523196053, u2=-1.5850698690679148)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    973.4390246428454, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.8344655844375897, u2=-0.75683774807402)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    998.7185375903493, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.6935640364787821, u2=-1.9710010921874046)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    445.2136549191438, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.6563649787618244, u2=-0.6056626441144751)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    44.74665069613194, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.4488122181363066, u2=-2.103719440497151)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    447.0616764362898, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.1801866266441605, u2=-1.2215325042715586)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    710.1750896222565, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.3729431916577912, u2=-2.81651696733653)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    626.0717015587145, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.105330884191954, u2=-0.4988107380233804)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    670.6500995614805, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.4449114625426134, u2=-1.0890924180457497)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    971.9188879278325, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.2098632872289325, u2=-0.4290732115977083)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    661.9715789145949, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.126976082957105, u2=-2.781611493007832)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    91.45111090746086, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.04522727099989465, u2=-2.644284124804845)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    589.7314204786176, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.9460086339910223, u2=-0.8480307203739512)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    211.58179482526114, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.6972957884486295, u2=-2.013953733499119)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    795.0758399239285, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.787122450619563, u2=-2.469944380583526)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    350.30663192187023, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.650800105033631, u2=-1.7100823536384409)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    502.4369752066787, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.4993497089056351, u2=-1.6359866772324188)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    703.5394425924459, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.0275979353409106, u2=-0.8013716436113099)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    171.62850429026258, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-0.37187670377396653, u2=-0.3699980266371077)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    601.0598400727467, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.6499167876603043, u2=-2.7019256980646476)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    160.0354507044476, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=0.9618667902881084, u2=-2.711212365773658)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    826.5785747671902, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.8403496990672377, u2=-1.935994226092477)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    332.70229579088965, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-2.1825589842338533, u2=-1.083186394041232)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    546.6976399194065, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.3847863625891783, u2=-1.1127077663767166)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    830.7107739317335, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.2742237973720818, u2=-2.2052714687236943)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    969.0670930727114, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=-1.7511372558155696, u2=-2.7016197538624738)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    327.5356501637797, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=1.4056086474665328, u2=-2.67255063036884)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    88.37473123788627, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
mdb.models['Model-1'].boundaryConditions['indenter'].setValuesInStep(stepName=
    'static', u1=2.3201945720192603, u2=-2.361639082987109)
mdb.models['Model-1'].materials['Material'].hyperelastic.setValues(table=((
    963.4891602904569, 0.0), ))
mdb.jobs['Job'].submit(consistencyChecking=OFF)
mdb.jobs['Job'].waitForCompletion()
# Save by user on 2021_09_09-23.34.40; build 2021.HF4 2020_11_25-20.39.27 167889
# Save by user on 2021_09_10-11.52.13; build 2021.HF4 2020_11_25-20.39.27 167889
